Python 3.6.5 (default, Apr  1 2018, 05:46:30) 
[GCC 7.3.0] on linux
Type "copyright", "credits" or "license()" for more information.
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
d
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 10, in <module>
    rand(2,2)
NameError: name 'rand' is not defined
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 10, in <module>
    s = np.random.uniform(1,2,3)
NameError: name 'np' is not defined
>>> SUKA BLED
SyntaxError: invalid syntax
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 10, in <module>
    s = numpy.random.uniform(1,2,3)
NameError: name 'numpy' is not defined
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
>>> s
array([1.78403881, 1.44837319, 1.86381614])
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[1.37561287 1.18601214 1.41971007]
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
1.0
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
1.531931041218463
>>> print(random.unifrom.__doc__)
Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    print(random.unifrom.__doc__)
AttributeError: module 'numpy.random' has no attribute 'unifrom'
>>> print(random.unifrom.__doc__)
Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    print(random.unifrom.__doc__)
AttributeError: module 'numpy.random' has no attribute 'unifrom'
>>> print(random.uniform.__doc__)

        uniform(low=0.0, high=1.0, size=None)

        Draw samples from a uniform distribution.

        Samples are uniformly distributed over the half-open interval
        ``[low, high)`` (includes low, but excludes high).  In other words,
        any value within the given interval is equally likely to be drawn
        by `uniform`.

        Parameters
        ----------
        low : float or array_like of floats, optional
            Lower boundary of the output interval.  All values generated will be
            greater than or equal to low.  The default value is 0.
        high : float or array_like of floats
            Upper boundary of the output interval.  All values generated will be
            less than high.  The default value is 1.0.
        size : int or tuple of ints, optional
            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
            ``m * n * k`` samples are drawn.  If size is ``None`` (default),
            a single value is returned if ``low`` and ``high`` are both scalars.
            Otherwise, ``np.broadcast(low, high).size`` samples are drawn.

        Returns
        -------
        out : ndarray or scalar
            Drawn samples from the parameterized uniform distribution.

        See Also
        --------
        randint : Discrete uniform distribution, yielding integers.
        random_integers : Discrete uniform distribution over the closed
                          interval ``[low, high]``.
        random_sample : Floats uniformly distributed over ``[0, 1)``.
        random : Alias for `random_sample`.
        rand : Convenience function that accepts dimensions as input, e.g.,
               ``rand(2,2)`` would generate a 2-by-2 array of floats,
               uniformly distributed over ``[0, 1)``.

        Notes
        -----
        The probability density function of the uniform distribution is

        .. math:: p(x) = \frac{1}{b - a}

        anywhere within the interval ``[a, b)``, and zero elsewhere.

        When ``high`` == ``low``, values of ``low`` will be returned.
        If ``high`` < ``low``, the results are officially undefined
        and may eventually raise an error, i.e. do not rely on this
        function to behave when passed arguments satisfying that
        inequality condition.

        Examples
        --------
        Draw samples from the distribution:

        >>> s = np.random.uniform(-1,0,1000)

        All values are within the given interval:

        >>> np.all(s >= -1)
        True
        >>> np.all(s < 0)
        True

        Display the histogram of the samples, along with the
        probability density function:

        >>> import matplotlib.pyplot as plt
        >>> count, bins, ignored = plt.hist(s, 15, normed=True)
        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')
        >>> plt.show()

        
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[1.20059906 1.52853532 1.7065447  1.62121993 1.16950129 1.68423774
 1.57268258 1.16320197 1.32107177 1.27461548 1.98599788 1.86427932
 1.58859411 1.69686477 1.07781329 1.84529244 1.60356824 1.67586662
 1.20691361 1.35835357 1.73311741 1.34002986 1.13617937 1.057672
 1.05099433 1.6841524  1.66616084 1.93783186 1.32391212 1.07952522
 1.66766904 1.96168873 1.70815495 1.66777784 1.31797669 1.35886621
 1.94476983 1.17521405 1.88904424 1.6648625  1.88577272 1.41641182
 1.16326369 1.77609868 1.80692531 1.73258413 1.106261   1.57292963
 1.67441715 1.65325572 1.95997794 1.04400994 1.74722733 1.69464664
 1.90346685 1.77179752 1.22015278 1.63026383 1.38789098 1.89706581
 1.99576444 1.88124757 1.08218384 1.78015396 1.81257578 1.49708929
 1.17771324 1.96900549 1.60329523 1.36681288 1.51085143 1.17622249
 1.52594184 1.84003741 1.2684277  1.99322957 1.1311871  1.57537556
 1.58908531 1.37370811 1.30306805 1.47757531 1.81313237 1.72914571
 1.99164684 1.73271905 1.54200644 1.20562293 1.91928267 1.92225894
 1.02159097 1.9962911  1.63634362 1.06662733 1.09931563 1.81440324
 1.47094262 1.55534961 1.08711038 1.17968226 1.99902777 1.45442784
 1.99894061 1.24626843 1.12455226 1.77147603 1.76609825 1.87735676
 1.00531398 1.32129179 1.92194537 1.60003905 1.66420631 1.26836088
 1.26785021 1.50284705 1.23583491 1.61891923 1.25703945 1.40150716
 1.9933009  1.26587068 1.8109241  1.68044149 1.64680986 1.5026887
 1.27961692 1.58086065 1.82890908 1.96012807 1.75035333 1.92747734
 1.20264682 1.59017129 1.87006973 1.28349186 1.23846341 1.18387303
 1.72917224 1.33564484 1.06870704 1.93815776 1.05796573 1.14001647
 1.77055437 1.63399118 1.96406715 1.55720149 1.95530496 1.68956107
 1.81633955 1.99336323 1.6259047  1.0065373  1.86651262 1.46215099
 1.83996991 1.14100723 1.519964   1.31577369 1.52612698 1.6494114
 1.40717724 1.17439795 1.77632024 1.12850278 1.6896996  1.59919189
 1.21956268 1.01501797 1.12701935 1.22685251 1.27058427 1.30663243
 1.32535358 1.77677339 1.49985189 1.40284722 1.4044715  1.38829704
 1.97103238 1.9837207  1.96120146 1.71947561 1.02867437 1.66423376
 1.15674799 1.1541752  1.51379863 1.84283324 1.02137961 1.25669698
 1.13753671 1.06169795 1.20889903 1.70784111 1.99193627 1.23600243
 1.97770114 1.82080193 1.45456116 1.74408983 1.85527176 1.27173787
 1.94724636 1.65287197 1.77285749 1.04091569 1.6940667  1.2729975
 1.92138968 1.43062615 1.27912934 1.32700583 1.67977173 1.39857447
 1.56496191 1.77677191 1.54763206 1.33745258 1.85438784 1.69947823
 1.28185911 1.75737466 1.38364536 1.30450728 1.88362675 1.24126976
 1.18544704 1.6671868  1.16040233 1.05560859 1.00928281 1.41009585
 1.49325094 1.90137523 1.11739689 1.31966673 1.08760764 1.37176248
 1.1978177  1.03922443 1.06893057 1.57906983 1.77614547 1.84448032
 1.3210545  1.15205866 1.36293725 1.75211178 1.1697855  1.79608089
 1.77237828 1.81047645 1.31565107 1.96005612 1.97962623 1.22342549
 1.4484517  1.17693681 1.27103408 1.32618173 1.82517486 1.40651843
 1.83240891 1.37004352 1.38494415 1.5690678  1.82975242 1.10786666
 1.07378437 1.29163099 1.87263272 1.25797526 1.90842029 1.90759431
 1.48553468 1.72897841 1.75640089 1.21153223 1.34847298 1.853317
 1.59561047 1.52534452 1.50768109 1.83941564 1.26597817 1.07047647
 1.36266767 1.40982073 1.8376735  1.91608441 1.41764612 1.217142
 1.77766364 1.39760247 1.83331734 1.09988652 1.72509417 1.29265154
 1.74913194 1.5735927  1.10973774 1.47332481 1.14702227 1.16863187
 1.16672449 1.51093827 1.13222973 1.22852443 1.0661338  1.78803729
 1.04150289 1.63262909 1.37935782 1.28364424 1.95390247 1.35067617
 1.9836033  1.58500862 1.14468553 1.51814382 1.12689745 1.83491976
 1.69332143 1.98213242 1.06068371 1.36821518 1.23047383 1.03202557
 1.51632269 1.9718927  1.26262251 1.95660943 1.57754796 1.43397417
 1.91155513 1.72747061 1.62398042 1.90512769 1.3204742  1.54588783
 1.99117318 1.23331823 1.61831112 1.87364692 1.18842686 1.12484494
 1.88936598 1.83372875 1.38362215 1.45286912 1.57916965 1.43203414
 1.23280899 1.79296945 1.48228116 1.2012502  1.87431756 1.22304376
 1.84196739 1.98406803 1.96167431 1.92056788 1.89622407 1.49278726
 1.44739302 1.13946002 1.01795442 1.26397281 1.54595275 1.37223396
 1.80050553 1.06084725 1.08348267 1.45603091 1.67927087 1.57323585
 1.21595198 1.89016252 1.87409735 1.22351827 1.69191277 1.48277203
 1.8809096  1.54207985 1.66350996 1.89173692 1.84596582 1.64010591
 1.13847795 1.25054976 1.99187703 1.02306695 1.0796383  1.30190296
 1.79728902 1.94986466 1.85055394 1.00659606 1.41509502 1.62381957
 1.92231577 1.08484693 1.61667672 1.05801559 1.30102062 1.54667777
 1.91748933 1.78855413 1.23099375 1.00201642 1.27590831 1.71026029
 1.8560055  1.06036099 1.61264792 1.14413273 1.26558402 1.39083106
 1.20420817 1.76971107 1.70682801 1.82533209 1.6893148  1.77300388
 1.8663117  1.47050969 1.47086271 1.31435636 1.31062636 1.31690377
 1.11698034 1.10177899 1.33597115 1.74206803 1.00284405 1.99267694
 1.4797306  1.67601095 1.24011149 1.40714807 1.30274633 1.69464981
 1.60349748 1.98381651 1.38078624 1.19886493 1.54962307 1.49486327
 1.94410783 1.30616898 1.2146737  1.38576002 1.63624111 1.60743434
 1.95186521 1.25161978 1.73531362 1.9840144  1.70368095 1.39222914
 1.31090468 1.29317015 1.91896479 1.13023515 1.11456291 1.74246812
 1.97773098 1.98947398 1.29156709 1.5721308  1.14415321 1.76240466
 1.01473971 1.672917   1.52468524 1.58611512 1.86388449 1.26229588
 1.16964207 1.97892539 1.19286785 1.7362464  1.8862511  1.26509847
 1.12427675 1.49741685 1.98260134 1.1565827  1.05988637 1.21255551
 1.52038235 1.68508715 1.11372059 1.08310004 1.10310251 1.0496805
 1.96598793 1.11527002 1.17396866 1.90658365 1.28291622 1.25981883
 1.20596467 1.1645938  1.03367864 1.04784771 1.57862835 1.56335191
 1.56328277 1.36722335 1.58724374 1.96991416 1.1417105  1.43235352
 1.28277411 1.48858017 1.1667304  1.28231752 1.03586871 1.94590685
 1.8638517  1.12940776 1.98842249 1.6053385  1.76096918 1.64060191
 1.11660852 1.12723812 1.56202562 1.96661516 1.07991665 1.62871829
 1.75820177 1.67454961 1.92270103 1.47722081 1.86455228 1.80720636
 1.86824725 1.10146552 1.54324084 1.28028808 1.16829462 1.75920293
 1.81606056 1.24315222 1.93766963 1.32860421 1.63076275 1.93974528
 1.02521854 1.29686514 1.70031471 1.81758094 1.9959766  1.10316706
 1.44768447 1.39664231 1.0320619  1.69965398 1.23101462 1.45742406
 1.51921427 1.83965352 1.76709213 1.03270216 1.23982976 1.08733134
 1.08260505 1.7230442  1.51470739 1.64926459 1.92314661 1.0215887
 1.10792616 1.46366895 1.97325171 1.30672159 1.52401585 1.1423161
 1.86840641 1.67557124 1.51822088 1.3946171  1.30099874 1.93031329
 1.54212867 1.88249134 1.62382285 1.76961045 1.08603192 1.40429737
 1.60470245 1.01606926 1.72106581 1.24454485 1.42327139 1.66801207
 1.27039267 1.24119155 1.19894426 1.90110021 1.810779   1.95194095
 1.9014752  1.41581814 1.48746863 1.02074743 1.2929908  1.32799859
 1.73116783 1.82798479 1.17830335 1.97181172 1.91474891 1.25949645
 1.93383882 1.81163109 1.53354056 1.34281742 1.5838153  1.24242927
 1.42311015 1.94626507 1.84121943 1.98673724 1.15875347 1.76468176
 1.52100099 1.03465415 1.00349048 1.86755097 1.42318189 1.58589661
 1.26002353 1.25136744 1.76537359 1.69246473 1.25358214 1.85132977
 1.05025491 1.30831373 1.67849462 1.75005872 1.06856424 1.74997305
 1.43176401 1.32666774 1.10317109 1.60120788 1.82375673 1.26974037
 1.13403742 1.83319458 1.23776092 1.14729336 1.38446313 1.68276307
 1.92182371 1.86884773 1.37181182 1.17469018 1.75790785 1.9700826
 1.35601729 1.79039609 1.04004869 1.32464409 1.14048874 1.63128979
 1.02878499 1.77256484 1.18899923 1.59116026 1.01770933 1.98082597
 1.81212371 1.16644503 1.54219348 1.46989035 1.20807106 1.22288642
 1.40026456 1.14370108 1.40210648 1.7677614  1.58137672 1.76889993
 1.61064442 1.12257486 1.65872153 1.88050243 1.76744959 1.31014921
 1.06630951 1.17008359 1.33893647 1.37172275 1.55263243 1.80205327
 1.94513342 1.84426064 1.5921391  1.38504747 1.00722285 1.14423449
 1.2117994  1.78101532 1.3764305  1.98450861 1.10781807 1.18157114
 1.97868617 1.13585515 1.10141926 1.94798952 1.28156602 1.10292531
 1.04507305 1.99456884 1.86975887 1.28645687 1.93266869 1.91317026
 1.61658848 1.14588595 1.84746256 1.70053487 1.54460255 1.5272749
 1.36583411 1.3727048  1.06150357 1.13260744 1.76312393 1.10354782
 1.97660503 1.34500597 1.43670592 1.94780798 1.42329239 1.19246307
 1.52881148 1.80569219 1.22681757 1.43202534 1.07520822 1.19426227
 1.1938522  1.44557521 1.87966628 1.53171481 1.77736985 1.5033228
 1.06334899 1.36876974 1.13511458 1.12849518 1.50060589 1.42082874
 1.8876213  1.52896218 1.33715818 1.56613411 1.77514419 1.11144654
 1.4733601  1.10607875 1.47838343 1.1312818  1.68344559 1.2524579
 1.21323977 1.1425078  1.36198272 1.63755802 1.14553393 1.3837876
 1.84485483 1.73180401 1.72779483 1.40805369 1.45069597 1.27253909
 1.68513088 1.15391212 1.49654512 1.93304438 1.32548231 1.09057622
 1.84386635 1.16377698 1.58006424 1.46942795 1.64676625 1.83173964
 1.178542   1.67991415 1.14076962 1.52185573 1.67441149 1.77159906
 1.34134295 1.25258829 1.82536451 1.67136268 1.03585119 1.84236951
 1.73147169 1.80654687 1.31350491 1.46530942 1.29269193 1.53203657
 1.77003811 1.90974091 1.05541693 1.14640859 1.61687893 1.11960998
 1.92728698 1.03812634 1.70639665 1.23517411 1.73404688 1.22209578
 1.60113363 1.33658979 1.42750407 1.60347353 1.43715411 1.32009708
 1.15017899 1.92160221 1.91448403 1.84952914 1.11997016 1.69806795
 1.66701415 1.03073851 1.79502734 1.32420802 1.83332303 1.48957571
 1.64921672 1.50670881 1.16547343 1.8331675  1.37248948 1.88180247
 1.19789051 1.09237732 1.29616743 1.41945034 1.31966412 1.31961983
 1.58769034 1.77854202 1.3669834  1.40339935 1.24386333 1.80269789
 1.1962775  1.23862398 1.03984851 1.12766687 1.91382243 1.07927697
 1.32930203 1.87489779 1.88492308 1.59668464 1.01527652 1.7776047
 1.42618054 1.88452398 1.73240077 1.37121488 1.78911978 1.6711897
 1.48605628 1.26973928 1.28430806 1.37618754 1.35281087 1.14021133
 1.10959845 1.88089933 1.32287832 1.57910304 1.88138204 1.51696257
 1.12709946 1.62591426 1.4223833  1.40586215 1.71535761 1.37953045
 1.43835824 1.1275644  1.95515769 1.36850592 1.21917177 1.26310921
 1.94693676 1.85510835 1.10891912 1.75977403 1.06876234 1.53342809
 1.04507912 1.12628346 1.07609338 1.74945661 1.44930512 1.95430113
 1.59694216 1.03828833 1.84106163 1.73961197 1.79739539 1.75538039
 1.35762779 1.81808557 1.52833039 1.02229662 1.24663397 1.04280425
 1.1074518  1.73613049 1.51026794 1.84360762 1.57100361 1.66027726
 1.46298658 1.16598589 1.4992648  1.73498092 1.66337103 1.7430151
 1.17954111 1.2330989  1.85886707 1.30200096 1.76289631 1.58646646
 1.63653216 1.63952509 1.78397151 1.52793853 1.97999766 1.53215197
 1.45480686 1.56194794 1.17616948 1.55674405 1.5709705  1.69681959
 1.92575485 1.86262616 1.13093685 1.59738048 1.13900437 1.46684434
 1.40419359 1.63357088 1.2192113  1.96224462 1.32298245 1.40834883
 1.03622301 1.30490845 1.07762498 1.30937728 1.66882237 1.57701337
 1.08039436 1.15484269 1.5988385  1.11940038 1.10053468 1.85452659
 1.38673582 1.24156221 1.15474455 1.1385404  1.83683026 1.66305456
 1.34264537 1.03986865 1.63581206 1.4600542  1.58916907 1.53880533
 1.49814342 1.29719964 1.17068414 1.10108196]
>>> random.uniform(0,1,5)
array([0.3393806 , 0.91139892, 0.43550131, 0.99969031, 0.19483837])
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[1.24893005]
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
1
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
>>> 
1
>>> 
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
1

>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
>>> 
1
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
1
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
1
>>> for i in range(5):
	int(random.uniform(0,10))

	
5
5
6
6
8

>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
>>> sum(k)
100
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[17, 24, 19, 20, 20]
100
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[18, 22, 23, 20, 17]
100

>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[18, 19, 21, 18, 24]
100

>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[189, 211, 221, 197, 182]
1000
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[180, 202, 195, 210, 213]
1000
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
[613, 62, 60, 62, 203]
1000
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 36, in <module>
    from matprolib import pyplot as plt
ModuleNotFoundError: No module named 'matprolib'
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

Warning (from warnings module):
  File "/usr/local/anaconda3/lib/python3.6/site-packages/matplotlib/font_manager.py", line 281
    'Matplotlib is building the font cache using fc-list. '
UserWarning: Matplotlib is building the font cache using fc-list. This may take a moment.
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 39, in <module>
    plt.plot(x[i].y[i],"ko")
AttributeError: 'numpy.float64' object has no attribute 'y'
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 41, in <module>
    if y[i] > 0 and y < x[i]:
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 41, in <module>
    if y[i] > 0 and y < x[i]:
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()

>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 41, in <module>
    if y[i] > 0 and y < x[i]:
ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
Traceback (most recent call last):
  File "/home/user/RTR105/MonteCarlo1.py", line 48, in <module>
    s_nezinamais = 1. * s_zinamais * N1/N
NameError: name 'N1' is not defined
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
0.0
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
0.0
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
0.0
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
0.0
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
11.85
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
12.6
>>> 
================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================

================= RESTART: /home/user/RTR105/MonteCarlo1.py =================
12.365
>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================
Traceback (most recent call last):
  File "/home/user/RTR105/18nod.py", line 14, in <module>
    fun = sin(sqrt(x))*sin(sqrt(x))
TypeError: only size-1 arrays can be converted to Python scalars
>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================
Traceback (most recent call last):
  File "/home/user/RTR105/18nod.py", line 14, in <module>
    fun = sin(sqrt(x)) * sin(sqrt(x))
TypeError: only size-1 arrays can be converted to Python scalars
>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================
Traceback (most recent call last):
  File "/home/user/RTR105/18nod.py", line 14, in <module>
    funct = sin(sqrt(x)) * sin(sqrt(x))
TypeError: only size-1 arrays can be converted to Python scalars
>>> x
array([1.27581735e+00, 2.41155223e+00, 4.47751560e+00, 8.72398778e-01,
       1.55572907e-01, 4.71390048e+00, 4.70412907e+00, 2.11361233e+00,
       1.59313341e+00, 4.50745593e+00, 1.82286006e+00, 2.40571543e+00,
       4.93127141e+00, 3.99059178e-01, 2.83415013e-01, 3.60750290e+00,
       3.48299623e+00, 2.47896791e+00, 2.72621020e+00, 4.43023804e+00,
       3.16296628e+00, 3.19983538e+00, 4.63138056e+00, 4.87637815e+00,
       1.09009458e+00, 1.03440357e+00, 3.59525190e+00, 1.57100278e+00,
       4.65146464e+00, 4.17261161e+00, 1.66793414e+00, 3.31635263e+00,
       1.51295415e+00, 3.74647171e+00, 2.20985190e+00, 3.34326307e+00,
       2.90376935e+00, 2.67924881e+00, 9.81206006e-01, 2.17137050e+00,
       3.17952138e+00, 4.21937929e+00, 1.26733334e-01, 3.48032459e+00,
       1.31730426e+00, 3.96905834e+00, 3.19156625e+00, 4.60086876e+00,
       2.54931189e+00, 2.24505425e+00, 4.33729325e+00, 1.38728569e+00,
       1.93418143e+00, 2.18208939e+00, 4.72394221e+00, 3.47880318e+00,
       3.06351908e+00, 3.54484374e+00, 3.90115642e+00, 3.63861468e+00,
       1.21112183e+00, 4.57819066e+00, 3.78508414e-01, 3.73600470e+00,
       4.49221694e+00, 4.52342977e+00, 5.83347572e-01, 4.78991989e+00,
       2.53914733e+00, 2.24500267e+00, 3.74137325e+00, 1.44271145e+00,
       4.16608465e+00, 9.49495838e-01, 1.83267379e+00, 2.25681440e+00,
       4.62033770e+00, 2.57620531e+00, 4.68709600e+00, 3.81119613e+00,
       4.73687928e+00, 2.79689308e+00, 4.40997340e+00, 3.59740958e+00,
       4.45317624e+00, 4.37340451e+00, 3.00405612e+00, 2.96938273e+00,
       4.64247121e+00, 4.33029481e-01, 7.85030779e-01, 3.36328695e+00,
       4.01074585e+00, 2.56594507e-01, 2.47187422e+00, 8.47693285e-01,
       2.45087282e+00, 1.51016367e+00, 4.42152360e+00, 3.92241077e+00,
       2.88103017e+00, 3.48120040e+00, 1.71465529e+00, 2.74683057e+00,
       5.74896988e-01, 4.71508136e-01, 1.70792460e-01, 4.44429229e+00,
       2.71169314e+00, 1.78777452e+00, 2.69090892e+00, 2.28602830e+00,
       4.19894530e+00, 3.26627805e+00, 3.74303461e+00, 4.85344910e+00,
       1.90790921e+00, 2.68521585e+00, 1.94762871e+00, 5.96216713e-01,
       1.66974570e+00, 4.39382415e+00, 1.90428320e+00, 3.00767238e-01,
       3.66329003e+00, 2.03153883e+00, 1.98978860e+00, 3.12868923e+00,
       3.24128961e+00, 3.29055720e+00, 4.87293780e+00, 1.28962653e+00,
       3.36174794e+00, 4.32090943e+00, 1.87634396e-01, 3.43640425e+00,
       4.94462781e+00, 3.47993001e+00, 4.07815910e+00, 1.81407922e+00,
       3.51082568e-02, 4.89103753e+00, 2.74816772e-01, 4.04544963e+00,
       2.99364250e+00, 4.51927007e+00, 4.53715467e+00, 4.91702046e+00,
       1.97792727e+00, 4.39977714e+00, 1.64956938e+00, 4.95334433e+00,
       1.28558779e+00, 2.64765663e+00, 2.08301506e+00, 3.23089698e+00,
       2.44506258e+00, 2.15619335e+00, 1.91450076e+00, 3.44723321e-01,
       2.00079259e+00, 1.69502497e+00, 8.37841559e-01, 2.55650795e+00,
       2.63237978e+00, 1.83886345e+00, 4.35585213e+00, 7.26846183e-01,
       3.42218089e+00, 4.96376866e-01, 3.68900655e+00, 1.52895540e+00,
       1.25536655e+00, 3.37490696e+00, 3.71561181e+00, 2.91310193e+00,
       4.16111754e+00, 3.85299704e+00, 4.91152193e+00, 4.79883185e-01,
       1.41368999e+00, 5.19929326e-01, 1.96479892e-01, 1.63245553e+00,
       4.32285663e+00, 4.31252422e+00, 2.19622609e+00, 2.90804064e+00,
       4.97527157e+00, 2.62059091e+00, 4.22547116e+00, 3.17359989e+00,
       3.42712580e-01, 8.15515353e-02, 1.40634478e+00, 1.56926474e+00,
       1.91989636e+00, 4.31326331e+00, 4.31105422e+00, 1.26541451e+00,
       1.41545995e+00, 6.06297668e-01, 2.86549750e+00, 7.48879508e-01,
       1.75991754e+00, 4.16299244e+00, 4.28880639e-01, 8.82761549e-01,
       9.29298984e-01, 5.89110007e-01, 3.58708048e+00, 2.13371724e+00,
       4.13824265e+00, 4.15091425e+00, 2.26054534e-01, 2.25683631e+00,
       3.58913178e+00, 3.49088883e+00, 2.53953640e+00, 6.66004850e-01,
       3.75166763e+00, 1.30918898e+00, 3.37862108e-01, 1.50082261e+00,
       2.34656351e+00, 3.86389707e+00, 3.42079842e+00, 2.59897538e+00,
       2.59826051e+00, 4.71293817e+00, 2.39518741e+00, 3.54014987e+00,
       2.05898553e+00, 2.60976679e-01, 2.10401812e+00, 3.36624235e+00,
       4.93633013e+00, 3.10691080e+00, 3.35016945e+00, 3.31404589e+00,
       1.00957460e-01, 3.97087238e+00, 2.33746679e+00, 1.81938920e-02,
       4.25286969e+00, 1.90763844e+00, 1.23738010e+00, 3.68510702e+00,
       3.28591873e+00, 1.59495888e+00, 3.31471528e+00, 4.97712633e+00,
       4.82729709e+00, 2.96899042e+00, 4.07696623e+00, 4.87843585e+00,
       4.03802783e+00, 3.91819296e+00, 2.18863880e+00, 4.76713625e-01,
       2.48406995e-03, 2.68370637e+00, 4.21260147e+00, 1.88116783e+00,
       4.83447838e+00, 3.49842379e+00, 2.84294745e+00, 3.43371433e+00,
       3.79554570e-01, 1.29425206e-01, 2.84017394e+00, 1.16270442e+00,
       1.80564233e-01, 1.35410264e+00, 1.26805415e+00, 8.74002162e-01,
       4.60153066e+00, 2.11700654e+00, 1.07659551e+00, 2.18796334e+00,
       2.64084763e+00, 1.69683957e+00, 3.49494094e+00, 4.38258988e+00,
       1.97837747e+00, 1.58167762e+00, 3.64365113e+00, 2.42339772e+00,
       4.81529206e+00, 3.44003028e+00, 4.35159330e+00, 4.29645255e+00,
       1.03715113e-01, 4.60860967e+00, 1.93350706e+00, 4.92432697e+00,
       2.21018482e+00, 1.78695490e+00, 2.83408828e+00, 3.80808094e+00,
       2.72341857e+00, 4.36858569e+00, 2.42602427e-01, 3.18142439e+00,
       1.69007828e-01, 1.19611813e+00, 1.75777078e+00, 4.08591695e+00,
       4.77157868e+00, 6.88816240e-02, 1.65538813e+00, 4.39903481e+00,
       3.86027945e+00, 4.84440573e+00, 3.94715376e+00, 4.91518548e+00,
       3.99987869e+00, 1.69948944e+00, 2.23948167e+00, 4.54962791e+00,
       1.10508158e+00, 2.72717354e+00, 1.10114677e+00, 3.74160134e+00,
       2.39431247e+00, 1.64540825e+00, 1.52358495e+00, 2.03837334e-01,
       2.88601701e+00, 4.45054346e-02, 2.06482435e+00, 2.90544351e-01,
       2.73655125e+00, 4.88445313e+00, 4.87987624e+00, 3.67492513e+00,
       4.57466866e+00, 3.10777537e+00, 3.25132274e+00, 4.36621293e+00,
       3.78197977e+00, 4.98095346e+00, 7.92723164e-01, 6.96237732e-01,
       4.99205604e+00, 4.56619527e+00, 2.64360652e+00, 5.97648537e-01,
       3.26175962e+00, 2.82431990e-01, 1.78616068e+00, 4.72481051e+00,
       4.88113212e+00, 3.05809113e+00, 3.10025260e+00, 3.82974330e-02,
       2.95942797e+00, 3.90098347e-01, 4.37766761e+00, 1.26475648e+00,
       1.80121515e+00, 1.07803396e+00, 2.52691308e+00, 8.17918695e-01,
       3.11759661e-01, 5.69038748e-01, 2.70962316e+00, 4.01422881e+00,
       5.65360075e-01, 2.76441207e+00, 5.53263304e-01, 3.87613739e-01,
       1.42603889e+00, 9.37514748e-01, 3.45720268e+00, 3.22333250e+00,
       2.74010429e+00, 4.20070147e+00, 1.09255096e+00, 1.10850165e+00,
       3.35537319e+00, 2.56266223e+00, 3.74632386e+00, 2.18627736e+00,
       4.41493022e+00, 4.20108363e+00, 8.71611202e-01, 4.23746759e+00,
       3.45235753e+00, 2.71196996e+00, 1.21301896e+00, 2.25960811e+00,
       1.04343237e+00, 1.87484067e+00, 1.88601866e+00, 1.45111421e+00,
       3.32200755e-01, 2.70229089e+00, 6.86052325e-01, 1.72200205e+00,
       4.38726355e-01, 7.33178728e-01, 4.26879587e+00, 3.74843137e+00,
       2.11548564e+00, 2.29788021e+00, 2.08731554e-01, 3.28817960e+00,
       4.84968024e+00, 8.50325085e-01, 2.06036686e+00, 6.30088621e-01,
       3.47351008e+00, 3.85988096e+00, 4.58795628e-01, 1.94371142e+00,
       1.11072298e+00, 2.92594768e+00, 3.72284279e+00, 3.19834723e+00,
       3.19242799e+00, 2.84611344e+00, 3.99582392e+00, 4.96567328e+00,
       3.52546076e+00, 6.61086939e-01, 4.55549956e+00, 4.92897116e+00,
       2.14964172e+00, 1.58266745e+00, 2.04367331e+00, 2.28717623e+00,
       1.00663487e+00, 3.21659474e+00, 4.55141550e+00, 9.95592860e-01,
       4.59833338e+00, 1.33379249e+00, 2.31364579e+00, 9.08642251e-02,
       2.95407060e-01, 2.84861638e+00, 4.69904006e+00, 1.63451243e+00,
       1.75995315e-01, 1.63233633e+00, 1.46633374e+00, 4.05511028e+00,
       6.94084312e-01, 1.31696209e+00, 3.93077510e+00, 3.73364316e+00,
       5.94939596e-01, 2.66909870e+00, 3.54182127e+00, 1.25555293e+00,
       1.38334646e+00, 4.35768447e+00, 4.51615104e+00, 4.09553832e+00,
       2.99586314e-01, 3.40367356e+00, 1.84344628e+00, 4.71839473e+00,
       2.06107206e+00, 5.60415446e-01, 2.58062247e+00, 5.60752879e-01,
       9.73891157e-01, 6.89760863e-01, 3.09418587e-01, 1.46079940e+00,
       6.72764497e-01, 3.10766512e+00, 4.31524899e+00, 1.33818112e+00,
       2.79985316e+00, 4.35851207e+00, 3.64281253e+00, 1.51619865e+00,
       4.78431618e+00, 1.17205824e+00, 9.56763522e-01, 7.59867435e-02,
       1.09870678e+00, 7.48809010e-01, 3.47755747e+00, 3.53861991e+00,
       3.87929690e+00, 4.45675971e+00, 3.11216867e+00, 6.53627336e-01,
       4.09979516e+00, 1.51286600e+00, 5.95797331e-01, 3.00709294e+00,
       4.41510405e+00, 2.78357430e+00, 2.66483767e+00, 2.64974838e+00,
       1.15894679e+00, 5.53853463e-01, 2.02905745e+00, 4.55913324e+00,
       4.30197118e+00, 2.17473037e-01, 6.94209887e-02, 1.00985223e+00,
       1.47829908e+00, 4.92995925e+00, 2.90194809e+00, 1.70339173e+00,
       3.38984202e+00, 2.17184044e+00, 4.14384718e+00, 4.87920653e+00,
       4.67617981e+00, 3.34056882e+00, 3.53783465e+00, 1.55442935e+00,
       2.24212035e+00, 3.46192785e+00, 3.51057036e+00, 1.01344525e+00,
       4.73491737e+00, 5.48031333e-01, 2.28998688e+00, 2.52765841e+00,
       1.26507002e+00, 1.80911397e+00, 1.80875147e+00, 2.61128893e+00,
       4.61121853e+00, 2.25483382e+00, 2.84807403e+00, 2.67460415e+00,
       3.34036979e+00, 2.41182784e+00, 4.40687426e+00, 2.75570248e+00,
       4.15433113e+00, 4.02200153e+00, 1.06613252e+00, 2.60401732e+00,
       2.70191577e+00, 5.99560761e-03, 4.54972854e+00, 7.40994711e-02,
       1.10549874e+00, 3.31448847e+00, 1.02087086e+00, 2.71356396e+00,
       2.60690857e+00, 1.09248248e+00, 1.48477410e+00, 2.24970363e-02,
       1.74306417e+00, 1.05968826e+00, 1.54299144e+00, 2.77624528e+00,
       4.80397606e-01, 1.65428052e+00, 1.15189960e+00, 4.93324644e+00,
       3.71281254e+00, 3.00276285e-01, 1.40171946e+00, 2.62494497e-01,
       3.53029605e+00, 3.80373879e+00, 8.72492327e-01, 1.32096885e-01,
       2.93978157e+00, 3.35216599e+00, 1.83495823e+00, 3.56944607e+00,
       1.37984454e+00, 2.64194471e+00, 1.52440676e+00, 2.17565063e+00,
       3.30683920e+00, 2.07397804e+00, 3.48501905e+00, 9.60799695e-01,
       1.00867167e+00, 4.46757604e+00, 2.18979938e+00, 3.36621881e+00,
       2.64993721e+00, 2.83297131e+00, 2.99447564e+00, 1.70085379e+00,
       1.82666661e+00, 2.93921081e+00, 4.65739795e+00, 4.87550690e+00,
       2.58428960e+00, 2.79269220e+00, 1.62532006e+00, 3.25863893e+00,
       3.13370478e+00, 2.76223671e+00, 1.61363498e+00, 2.51899178e+00,
       4.14601504e+00, 2.27184996e+00, 4.60030549e-01, 1.16009421e-01,
       4.64712060e+00, 3.43516981e+00, 3.43709383e+00, 3.76673344e+00,
       3.30454180e+00, 2.84515713e+00, 6.06628485e-01, 9.52847979e-01,
       4.09312395e+00, 4.92483190e+00, 1.42732396e+00, 2.79442040e+00,
       3.15234035e+00, 9.07692696e-01, 6.96333707e-01, 4.52421204e+00,
       9.68676854e-01, 8.18577962e-01, 3.43385064e+00, 4.67892501e+00,
       1.95234044e+00, 2.29575762e+00, 1.10490577e+00, 2.95258253e+00,
       4.21327562e+00, 3.25917788e+00, 4.59757206e+00, 3.59274113e-01,
       4.49834120e+00, 4.97230402e-04, 2.22798621e+00, 6.59948167e-01,
       1.17031726e+00, 2.83881121e+00, 4.62928063e+00, 3.16546791e+00,
       3.59930642e+00, 1.46278069e+00, 2.53552107e+00, 4.62771413e+00,
       4.62298012e+00, 1.00334907e+00, 4.14396645e+00, 1.61519655e+00,
       3.03772762e+00, 4.57751651e+00, 7.02951729e-01, 2.89249460e+00,
       3.16773338e+00, 1.62889156e+00, 2.30817938e+00, 2.00305866e+00,
       2.86522543e+00, 9.69812304e-01, 3.02222511e+00, 1.07504021e+00,
       1.48424459e+00, 2.64734018e-01, 2.04189029e+00, 3.66188142e+00,
       2.09587438e+00, 1.42291106e+00, 1.33685017e+00, 4.26782166e+00,
       1.91456056e+00, 2.57332414e+00, 1.09552933e+00, 1.35175666e+00,
       1.38847549e-01, 2.45338081e+00, 3.61206926e+00, 1.92829579e-01,
       2.11396764e+00, 4.53694059e-02, 1.99585481e+00, 4.50068812e+00,
       1.06826562e+00, 2.32354787e+00, 6.74020682e-01, 1.10656366e+00,
       5.90095037e-03, 4.16674595e+00, 2.41364350e+00, 4.21358818e+00,
       4.03884826e+00, 1.31623704e-01, 3.64197853e+00, 3.55851692e+00,
       1.68724647e+00, 1.89453201e+00, 2.03846884e+00, 5.27185601e-01,
       2.04326812e+00, 3.07659889e-01, 5.00436320e-01, 4.35357424e+00,
       3.83462045e+00, 9.32215406e-01, 2.02227593e-01, 3.40313681e+00,
       4.28977185e-01, 2.99094974e+00, 8.29879835e-01, 4.80067680e+00,
       4.63700283e+00, 4.09868177e+00, 2.05860387e+00, 1.93490400e+00,
       4.75103139e+00, 3.45602590e+00, 1.52246835e+00, 4.44027332e+00,
       9.31338834e-02, 3.26705353e+00, 1.69254667e+00, 3.41035477e+00,
       4.52641783e+00, 5.67904268e-01, 2.38162432e+00, 1.98059652e+00,
       4.80734723e+00, 1.10313350e+00, 4.61578203e+00, 2.62153074e+00,
       1.01263928e+00, 4.24458468e+00, 7.05802943e-01, 3.17502902e+00,
       1.17069160e+00, 4.30364951e+00, 4.59461316e+00, 4.01739345e+00,
       1.11268021e+00, 1.21652461e+00, 2.85158645e+00, 5.71466053e-01,
       1.63923822e+00, 2.87243849e+00, 2.88375967e+00, 4.91229976e-01,
       2.70309913e+00, 2.40601888e+00, 3.39455326e+00, 4.35360052e+00,
       1.56611180e+00, 4.55319289e+00, 4.72210142e+00, 4.43509801e+00,
       4.32459057e+00, 4.29142570e+00, 3.47774916e+00, 2.52384143e+00,
       6.69086711e-01, 8.66959111e-01, 2.21762804e-01, 2.28702905e+00,
       2.64340196e+00, 4.22299211e+00, 2.14805857e+00, 1.64789549e+00,
       2.70893098e+00, 3.49124670e+00, 2.64702840e+00, 3.67725996e+00,
       1.86042156e+00, 3.17693039e+00, 3.60209188e+00, 4.35023264e+00,
       4.08797832e+00, 8.71759247e-03, 4.79358481e+00, 2.12610711e+00,
       9.93329234e-01, 2.51715707e+00, 4.66392204e-01, 7.26570098e-01,
       2.40359221e+00, 4.22529276e+00, 1.24134799e+00, 9.47950591e-01,
       1.12067248e+00, 2.83163351e-01, 3.68993139e+00, 2.52546911e-01,
       1.77685423e+00, 4.84009405e+00, 3.09476036e+00, 2.37246822e+00,
       4.33131597e+00, 3.27212178e+00, 1.12290362e+00, 7.38267199e-01,
       4.15243310e+00, 2.25320357e+00, 9.58949968e-02, 1.09173406e+00,
       2.53736692e+00, 8.31006421e-01, 4.64148979e+00, 3.49758886e+00,
       2.92306152e+00, 3.28073874e+00, 2.75190690e+00, 1.48848576e-01,
       2.73043166e+00, 3.60202175e-01, 1.11170291e+00, 1.26253084e+00,
       1.51250977e+00, 1.55440055e+00, 4.59504917e+00, 3.95010604e+00,
       1.84901164e+00, 4.00280658e+00, 4.11988125e-01, 7.01988693e-01,
       1.65286161e+00, 1.37852388e+00, 3.20412059e+00, 1.36625114e-01,
       4.38155787e+00, 2.83596731e+00, 1.08197583e+00, 1.92044388e+00,
       2.69592960e+00, 1.59103577e+00, 1.29930780e-01, 2.44390381e+00,
       1.74567393e+00, 1.60250188e-01, 2.26563446e-01, 1.30544057e+00,
       4.91780757e-01, 2.76373092e+00, 1.94987413e+00, 2.92673927e+00,
       4.46934973e+00, 4.65967336e+00, 4.56435693e+00, 3.69220204e+00,
       4.72477793e+00, 1.18970560e+00, 3.40706746e+00, 8.91576861e-01,
       2.43130455e+00, 4.45289557e+00, 1.24642814e-01, 3.30028379e+00,
       4.31802256e+00, 7.54339481e-01, 1.44336583e+00, 3.78271072e+00,
       2.00591607e+00, 4.67464400e-01, 3.40140022e+00, 2.43187468e+00,
       6.57184089e-01, 3.17491089e+00, 8.53756146e-01, 4.61501554e+00,
       2.66011875e+00, 2.13105818e+00, 3.06878689e+00, 2.65597350e-01,
       3.93603156e+00, 3.74707842e+00, 1.93067111e+00, 2.55614256e+00,
       1.20668520e+00, 4.76894213e+00, 3.01446564e+00, 4.73301042e+00,
       4.42654391e+00, 5.99694957e-01, 4.16691046e+00, 4.43105213e+00,
       2.93057521e+00, 4.49296613e+00, 7.58157922e-01, 2.39243679e+00,
       3.20202173e+00, 4.95057405e+00, 3.29135208e+00, 4.31274430e+00,
       8.97074043e-01, 3.41914888e+00, 3.92838300e-01, 9.51530359e-01,
       3.26040369e+00, 1.77527510e+00, 2.29545465e+00, 4.67881303e+00,
       3.52675205e+00, 4.28969390e+00, 3.41204187e+00, 5.59934987e-01,
       2.29065020e+00, 4.15408156e+00, 2.33327609e+00, 4.73303897e+00,
       2.00370241e+00, 3.41784520e+00, 3.32565336e+00, 1.02961408e-01,
       4.27683105e+00, 3.04718382e-01, 2.64292541e+00, 2.64943599e+00,
       1.05337744e+00, 3.42131209e+00, 1.92259744e-01, 2.97528841e-01,
       1.14479763e-01, 2.33201670e+00, 4.45689226e+00, 2.87141130e+00,
       1.96098146e+00, 4.15051087e+00, 1.15313083e+00, 1.86659081e+00,
       1.37975446e+00, 1.66833964e+00, 4.49915858e+00, 4.71768449e+00,
       1.82057287e+00, 8.53504885e-01, 5.85991789e-01, 1.12132466e-01,
       4.56785227e+00, 4.74964854e+00, 2.14890044e+00, 1.47521421e+00,
       3.36773788e+00, 2.72433705e+00, 1.00193731e+00, 3.16093858e+00,
       3.88612560e+00, 2.12419408e-01, 8.62745159e-02, 3.63584104e+00,
       1.70911280e+00, 4.36491173e+00, 1.64125303e+00, 3.06387423e+00,
       3.91790393e+00, 2.64119050e+00, 1.43283899e+00, 2.11834813e+00,
       3.38189733e+00, 6.46895660e-01, 1.35100604e+00, 2.10690374e+00,
       2.43535321e+00, 2.65076284e+00, 1.37545940e+00, 4.88972222e+00,
       5.18033612e-01, 4.57565370e+00, 4.00658942e+00, 2.27530487e+00,
       3.54292609e+00, 3.82358847e+00, 1.57073595e-01, 3.80541031e+00,
       4.35364349e+00, 4.48268254e+00, 1.61178068e+00, 3.76954515e+00,
       2.07444398e+00, 3.80389417e-01, 1.94483686e+00, 2.86133185e+00,
       4.63831625e+00, 3.97014121e+00, 3.26801089e+00, 1.93780983e+00,
       4.02903346e+00, 2.50287457e+00, 3.78275828e+00, 5.10014513e-01,
       3.74549557e+00, 3.46946696e+00, 4.70635647e+00, 4.83326575e+00,
       1.68313018e+00, 1.20353267e+00, 3.19075303e-01, 6.64511889e-01,
       2.29374462e+00, 2.38531883e+00, 5.92543834e-01, 4.26386391e+00])
>>> sqrt(x)
Traceback (most recent call last):
  File "<pyshell#17>", line 1, in <module>
    sqrt(x)
TypeError: only size-1 arrays can be converted to Python scalars
>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================
>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================
>>> print(plt.plot.__doc__)
Plot lines and/or markers to the
:class:`~matplotlib.axes.Axes`.  *args* is a variable length
argument, allowing for multiple *x*, *y* pairs with an
optional format string.  For example, each of the following is
legal::

    plot(x, y)        # plot x and y using default line style and color
    plot(x, y, 'bo')  # plot x and y using blue circle markers
    plot(y)           # plot y using x as index array 0..N-1
    plot(y, 'r+')     # ditto, but with red plusses

If *x* and/or *y* is 2-dimensional, then the corresponding columns
will be plotted.

If used with labeled data, make sure that the color spec is not
included as an element in data, as otherwise the last case
``plot("v","r", data={"v":..., "r":...)``
can be interpreted as the first case which would do ``plot(v, r)``
using the default line style and color.

If not used with labeled data (i.e., without a data argument),
an arbitrary number of *x*, *y*, *fmt* groups can be specified, as in::

    a.plot(x1, y1, 'g^', x2, y2, 'g-')

Return value is a list of lines that were added.

By default, each line is assigned a different style specified by a
'style cycle'.  To change this behavior, you can edit the
axes.prop_cycle rcParam.

The following format string characters are accepted to control
the line style or marker:

================    ===============================
character           description
================    ===============================
``'-'``             solid line style
``'--'``            dashed line style
``'-.'``            dash-dot line style
``':'``             dotted line style
``'.'``             point marker
``','``             pixel marker
``'o'``             circle marker
``'v'``             triangle_down marker
``'^'``             triangle_up marker
``'<'``             triangle_left marker
``'>'``             triangle_right marker
``'1'``             tri_down marker
``'2'``             tri_up marker
``'3'``             tri_left marker
``'4'``             tri_right marker
``'s'``             square marker
``'p'``             pentagon marker
``'*'``             star marker
``'h'``             hexagon1 marker
``'H'``             hexagon2 marker
``'+'``             plus marker
``'x'``             x marker
``'D'``             diamond marker
``'d'``             thin_diamond marker
``'|'``             vline marker
``'_'``             hline marker
================    ===============================


The following color abbreviations are supported:

==========  ========
character   color
==========  ========
'b'         blue
'g'         green
'r'         red
'c'         cyan
'm'         magenta
'y'         yellow
'k'         black
'w'         white
==========  ========

In addition, you can specify colors in many weird and
wonderful ways, including full names (``'green'``), hex
strings (``'#008000'``), RGB or RGBA tuples (``(0,1,0,1)``) or
grayscale intensities as a string (``'0.8'``).  Of these, the
string specifications can be used in place of a ``fmt`` group,
but the tuple forms can be used only as ``kwargs``.

Line styles and colors are combined in a single format string, as in
``'bo'`` for blue circles.

The *kwargs* can be used to set line properties (any property that has
a ``set_*`` method).  You can use this to set a line label (for auto
legends), linewidth, anitialising, marker face color, etc.  Here is an
example::

    plot([1,2,3], [1,2,3], 'go-', label='line 1', linewidth=2)
    plot([1,2,3], [1,4,9], 'rs',  label='line 2')
    axis([0, 4, 0, 10])
    legend()

If you make multiple lines with one plot command, the kwargs
apply to all those lines, e.g.::

    plot(x1, y1, x2, y2, antialiased=False)

Neither line will be antialiased.

You do not need to use format strings, which are just
abbreviations.  All of the line properties can be controlled
by keyword arguments.  For example, you can set the color,
marker, linestyle, and markercolor with::

    plot(x, y, color='green', linestyle='dashed', marker='o',
         markerfacecolor='blue', markersize=12).

See :class:`~matplotlib.lines.Line2D` for details.

The kwargs are :class:`~matplotlib.lines.Line2D` properties:

  agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array 
  alpha: float (0.0 transparent through 1.0 opaque) 
  animated: bool 
  antialiased or aa: [True | False] 
  clip_box: a `~.Bbox` instance 
  clip_on: bool 
  clip_path: [(`~matplotlib.path.Path`, `~.Transform`) | `~.Patch` | None] 
  color or c: any matplotlib color 
  contains: a callable function 
  dash_capstyle: ['butt' | 'round' | 'projecting'] 
  dash_joinstyle: ['miter' | 'round' | 'bevel'] 
  dashes: sequence of on/off ink in points 
  drawstyle: ['default' | 'steps' | 'steps-pre' | 'steps-mid' | 'steps-post'] 
  figure: a `~.Figure` instance 
  fillstyle: ['full' | 'left' | 'right' | 'bottom' | 'top' | 'none'] 
  gid: an id string 
  label: object 
  linestyle or ls: ['solid' | 'dashed', 'dashdot', 'dotted' | (offset, on-off-dash-seq) | ``'-'`` | ``'--'`` | ``'-.'`` | ``':'`` | ``'None'`` | ``' '`` | ``''``]
  linewidth or lw: float value in points 
  marker: :mod:`A valid marker style <matplotlib.markers>`
  markeredgecolor or mec: any matplotlib color 
  markeredgewidth or mew: float value in points 
  markerfacecolor or mfc: any matplotlib color 
  markerfacecoloralt or mfcalt: any matplotlib color 
  markersize or ms: float 
  markevery: [None | int | length-2 tuple of int | slice | list/array of int | float | length-2 tuple of float]
  path_effects: `~.AbstractPathEffect` 
  picker: float distance in points or callable pick function ``fn(artist, event)`` 
  pickradius: float distance in points
  rasterized: bool or None 
  sketch_params: (scale: float, length: float, randomness: float) 
  snap: bool or None 
  solid_capstyle: ['butt' | 'round' |  'projecting'] 
  solid_joinstyle: ['miter' | 'round' | 'bevel'] 
  transform: a :class:`matplotlib.transforms.Transform` instance 
  url: a url string 
  visible: bool 
  xdata: 1D array 
  ydata: 1D array 
  zorder: float 

kwargs *scalex* and *scaley*, if defined, are passed on to
:meth:`~matplotlib.axes.Axes.autoscale_view` to determine
whether the *x* and *y* axes are autoscaled; the default is
*True*.

.. note::
    In addition to the above described arguments, this function can take a
    **data** keyword argument. If such a **data** argument is given, the
    following arguments are replaced by **data[<arg>]**:

    * All arguments with the following names: 'x', 'y'.



>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================
>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================

==================== RESTART: /home/user/RTR105/18nod.py ====================
3.475
>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================
25
4.4
>>> 
==================== RESTART: /home/user/RTR105/18nod.py ====================
25
4.075
>>> 
